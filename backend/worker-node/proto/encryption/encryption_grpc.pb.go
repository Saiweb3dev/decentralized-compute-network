// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/encryption.proto

package encryption

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EncryptionService_EncryptAES256_FullMethodName  = "/encryption.EncryptionService/EncryptAES256"
	EncryptionService_DecryptAES256_FullMethodName  = "/encryption.EncryptionService/DecryptAES256"
	EncryptionService_EncryptRSA2048_FullMethodName = "/encryption.EncryptionService/EncryptRSA2048"
	EncryptionService_DecryptRSA2048_FullMethodName = "/encryption.EncryptionService/DecryptRSA2048"
)

// EncryptionServiceClient is the client API for EncryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncryptionServiceClient interface {
	EncryptAES256(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error)
	DecryptAES256(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error)
	EncryptRSA2048(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error)
	DecryptRSA2048(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error)
}

type encryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncryptionServiceClient(cc grpc.ClientConnInterface) EncryptionServiceClient {
	return &encryptionServiceClient{cc}
}

func (c *encryptionServiceClient) EncryptAES256(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptionResponse)
	err := c.cc.Invoke(ctx, EncryptionService_EncryptAES256_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) DecryptAES256(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptionResponse)
	err := c.cc.Invoke(ctx, EncryptionService_DecryptAES256_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) EncryptRSA2048(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptionResponse)
	err := c.cc.Invoke(ctx, EncryptionService_EncryptRSA2048_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) DecryptRSA2048(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptionResponse)
	err := c.cc.Invoke(ctx, EncryptionService_DecryptRSA2048_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncryptionServiceServer is the server API for EncryptionService service.
// All implementations must embed UnimplementedEncryptionServiceServer
// for forward compatibility.
type EncryptionServiceServer interface {
	EncryptAES256(context.Context, *EncryptionRequest) (*EncryptionResponse, error)
	DecryptAES256(context.Context, *EncryptionRequest) (*EncryptionResponse, error)
	EncryptRSA2048(context.Context, *EncryptionRequest) (*EncryptionResponse, error)
	DecryptRSA2048(context.Context, *EncryptionRequest) (*EncryptionResponse, error)
	mustEmbedUnimplementedEncryptionServiceServer()
}

// UnimplementedEncryptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEncryptionServiceServer struct{}

func (UnimplementedEncryptionServiceServer) EncryptAES256(context.Context, *EncryptionRequest) (*EncryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptAES256 not implemented")
}
func (UnimplementedEncryptionServiceServer) DecryptAES256(context.Context, *EncryptionRequest) (*EncryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptAES256 not implemented")
}
func (UnimplementedEncryptionServiceServer) EncryptRSA2048(context.Context, *EncryptionRequest) (*EncryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptRSA2048 not implemented")
}
func (UnimplementedEncryptionServiceServer) DecryptRSA2048(context.Context, *EncryptionRequest) (*EncryptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptRSA2048 not implemented")
}
func (UnimplementedEncryptionServiceServer) mustEmbedUnimplementedEncryptionServiceServer() {}
func (UnimplementedEncryptionServiceServer) testEmbeddedByValue()                           {}

// UnsafeEncryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncryptionServiceServer will
// result in compilation errors.
type UnsafeEncryptionServiceServer interface {
	mustEmbedUnimplementedEncryptionServiceServer()
}

func RegisterEncryptionServiceServer(s grpc.ServiceRegistrar, srv EncryptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedEncryptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EncryptionService_ServiceDesc, srv)
}

func _EncryptionService_EncryptAES256_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).EncryptAES256(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_EncryptAES256_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).EncryptAES256(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_DecryptAES256_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).DecryptAES256(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_DecryptAES256_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).DecryptAES256(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_EncryptRSA2048_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).EncryptRSA2048(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_EncryptRSA2048_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).EncryptRSA2048(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_DecryptRSA2048_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).DecryptRSA2048(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_DecryptRSA2048_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).DecryptRSA2048(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncryptionService_ServiceDesc is the grpc.ServiceDesc for EncryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encryption.EncryptionService",
	HandlerType: (*EncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EncryptAES256",
			Handler:    _EncryptionService_EncryptAES256_Handler,
		},
		{
			MethodName: "DecryptAES256",
			Handler:    _EncryptionService_DecryptAES256_Handler,
		},
		{
			MethodName: "EncryptRSA2048",
			Handler:    _EncryptionService_EncryptRSA2048_Handler,
		},
		{
			MethodName: "DecryptRSA2048",
			Handler:    _EncryptionService_DecryptRSA2048_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/encryption.proto",
}
