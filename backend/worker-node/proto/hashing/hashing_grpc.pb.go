// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/hashing.proto

package hashing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HashingService_ComputeSHA256_FullMethodName    = "/hashing.HashingService/ComputeSHA256"
	HashingService_ComputeKeccak256_FullMethodName = "/hashing.HashingService/ComputeKeccak256"
	HashingService_ComputeBlake2B_FullMethodName   = "/hashing.HashingService/ComputeBlake2b"
)

// HashingServiceClient is the client API for HashingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashingServiceClient interface {
	ComputeSHA256(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error)
	ComputeKeccak256(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error)
	ComputeBlake2B(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error)
}

type hashingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashingServiceClient(cc grpc.ClientConnInterface) HashingServiceClient {
	return &hashingServiceClient{cc}
}

func (c *hashingServiceClient) ComputeSHA256(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, HashingService_ComputeSHA256_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashingServiceClient) ComputeKeccak256(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, HashingService_ComputeKeccak256_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashingServiceClient) ComputeBlake2B(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, HashingService_ComputeBlake2B_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashingServiceServer is the server API for HashingService service.
// All implementations must embed UnimplementedHashingServiceServer
// for forward compatibility.
type HashingServiceServer interface {
	ComputeSHA256(context.Context, *HashRequest) (*HashResponse, error)
	ComputeKeccak256(context.Context, *HashRequest) (*HashResponse, error)
	ComputeBlake2B(context.Context, *HashRequest) (*HashResponse, error)
	mustEmbedUnimplementedHashingServiceServer()
}

// UnimplementedHashingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHashingServiceServer struct{}

func (UnimplementedHashingServiceServer) ComputeSHA256(context.Context, *HashRequest) (*HashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSHA256 not implemented")
}
func (UnimplementedHashingServiceServer) ComputeKeccak256(context.Context, *HashRequest) (*HashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeKeccak256 not implemented")
}
func (UnimplementedHashingServiceServer) ComputeBlake2B(context.Context, *HashRequest) (*HashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeBlake2B not implemented")
}
func (UnimplementedHashingServiceServer) mustEmbedUnimplementedHashingServiceServer() {}
func (UnimplementedHashingServiceServer) testEmbeddedByValue()                        {}

// UnsafeHashingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashingServiceServer will
// result in compilation errors.
type UnsafeHashingServiceServer interface {
	mustEmbedUnimplementedHashingServiceServer()
}

func RegisterHashingServiceServer(s grpc.ServiceRegistrar, srv HashingServiceServer) {
	// If the following call pancis, it indicates UnimplementedHashingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HashingService_ServiceDesc, srv)
}

func _HashingService_ComputeSHA256_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashingServiceServer).ComputeSHA256(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashingService_ComputeSHA256_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashingServiceServer).ComputeSHA256(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashingService_ComputeKeccak256_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashingServiceServer).ComputeKeccak256(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashingService_ComputeKeccak256_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashingServiceServer).ComputeKeccak256(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashingService_ComputeBlake2B_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashingServiceServer).ComputeBlake2B(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashingService_ComputeBlake2B_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashingServiceServer).ComputeBlake2B(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashingService_ServiceDesc is the grpc.ServiceDesc for HashingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashing.HashingService",
	HandlerType: (*HashingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeSHA256",
			Handler:    _HashingService_ComputeSHA256_Handler,
		},
		{
			MethodName: "ComputeKeccak256",
			Handler:    _HashingService_ComputeKeccak256_Handler,
		},
		{
			MethodName: "ComputeBlake2b",
			Handler:    _HashingService_ComputeBlake2B_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hashing.proto",
}
